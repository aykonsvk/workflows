---
on:
  workflow_call:
    inputs:
      language:
        required: true
        default: "all"
        type: string
      ComposerVersion:
        required: false
        default: "latest"
        type: string
      ComposerArgs:
        required: true
        default: "install"
        type: string

    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true

jobs:
  test:
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ["self-hosted"]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2

      - name: run composer 
        if: inputs.language == 'php' && inputs.ComposerVersion == "2.2"
        uses: docker://composer:2.2
        with:
          args: ${{ inputs.ComposerArgs }}

      - name: run composer install 
        if: inputs.language == 'php' && inputs.ComposerVersion == "latest"
        uses: docker://composer
        with:
          args: ${{ inputs.ComposerArgs }}

  build:
    needs: test
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
    steps:
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.0.0
        with:
          version: latest
          endpoint: builders
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.docker-reg }}/${{ env.app }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=${{ env.tag }}
            type=ref,event=tag
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }} 
          ecr: false

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.1.1
        with:
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
