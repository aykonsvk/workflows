---
on:
  workflow_call:
    inputs:
      composer:
        required: true
        default: false
        type: boolean
      linter-config:
        type: string
        required: true
        default: easir/.github/.mega-linter.yml@master
    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true



jobs:
  build-test-and-push:
    runs-on: ["self-hosted"]
    steps:
      - name: GenerateTAG
        id: generatetag
        run: |
          echo "GITHUB_REF - $GITHUB_REF"
          echo "GITHUB_SHA - $GITHUB_SHA"
          echo "GITHUB_REPOSITORY - $GITHUB_REPOSITORY"
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-$GITHUB_SHA"
          fi
          echo "fulltag=${{secrets.docker-reg}}/$app:$tag">>"$GITHUB_ENV"
          echo ${{ github.event.inputs.run-composer-install }}
      - name: Checkout
        uses: actions/checkout@v2.4.2

      # - name: Super-Linter
      #   uses: github/super-linter/slim@v4.9.5
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.token }}
      #     # DISABLE_ERRORS: true
      #     # VALIDATE_ALL_CODEBASE: false
      #     VALIDATE_PHP_PSALM: false
      - name: run composer install 
        if: ${{ inputs.composer }}
        uses: docker://composer
        with:
          args: install

      - name: MegaLinter
        uses: oxsecurity/megalinter/flavors/php@v6.10.0
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          APPLY_FIXES: all
          APPLY_FIXES_MODE: push
          APPLY_FIXES_EVENT: all
          MEGALINTER_CONFIG: ${{ inputs.linter-config }}
        
      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.0.0
        with:
          version: latest
          endpoint: builders
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.docker-reg }}/${{ env.app }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            ${{ env.tag }}

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }} 
          ecr: false

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.1.1
        with:
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
