---
on:
  workflow_call:
    inputs:
      language:
        required: true
        default: "all"
        type: string

    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true


jobs:
  build-test-and-push:
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      APPLY_FIXES: all
      APPLY_FIXES_MODE: pull_request
      APPLY_FIXES_EVENT: all

    runs-on: ["self-hosted"]
    steps:
      - name: GenerateTAG
        id: generatetag
        run: |
          echo "GITHUB_REF - $GITHUB_REF"
          echo "GITHUB_SHA - $GITHUB_SHA"
          echo "GITHUB_REPOSITORY - $GITHUB_REPOSITORY"
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-$GITHUB_SHA"
          fi
          echo "fulltag=${{secrets.docker-reg}}/$app:$tag">>"$GITHUB_ENV"
          echo ${{ github.event.inputs.run-composer-install }}
      - name: Checkout
        uses: actions/checkout@v3.0.2

      # - name: Run & fix PHP Code Sniffer
      #   if: ${{ inputs.language == "php" }}
      #   uses: shalior/wordpress-phpcs-action@v1.0.3
      #   with:
      #     github_token: ${{ secrets.token }}

      - name: run composer install 
        if: inputs.language == 'php'
        uses: docker://composer
        with:
          args: install

      - name: MegaLinter-php
        id: ml
        uses: oxsecurity/megalinter@v6.11.0

      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      # Create pull request if applicable (for now works only on PR from same repository, not from forks)
      - name: Create Pull Request with applied fixes
        id: cpr
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: peter-evans/create-pull-request@v4.1.3
        with:
          token: ${{ secrets.token || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          title: "[MegaLinter] Apply linters automatic fixes"
          labels: bot
          base: ${{ github.head_ref }}
  
      - name: Create PR output
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.0.0
        with:
          version: latest
          endpoint: builders
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.docker-reg }}/${{ env.app }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            ${{ env.tag }}

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }} 
          ecr: false

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.1.1
        with:
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
