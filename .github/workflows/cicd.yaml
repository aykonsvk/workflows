---
on:
  workflow_call:
    inputs:
      language:
        required: false
        default: "all"
        type: string
      ComposerVersion:
        required: false
        default: "latest"
        type: string

    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true
      numa-numa-token:
        required: true
  workflow_dispatch:
    

  
jobs:
  setup_variables:
    outputs:
      output1: ${{ steps.runners.outputs.runners }}
      output2: ${{ steps.environment.outputs.environment }}
      output3: ${{ steps.imagetag.outputs.imagetag }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      GH_TOKEN: ${{ secrets.numa-numa-token }}
      FORCE_PUSH: ${{ contains(github.event.head_commit.message, '/forcepush') }}
      DO_E2E_TESTS: ${{ contains(github.event.head_commit.message, '/e2e') }}
    steps:
      # # THIS DOES NOT FULLY WORK WITHOUT SOME PERMISSIONS !
      - name: how meny already paid minutes we have on github action runners?
        id: runners
        run: | 
          env
          minutes=`gh api -H "Accept: application/vnd.github+json" /orgs/easir/settings/billing/actions | jq ".total_minutes_used"`
          if (( $minutes < 3000 ))
          then 
          export runners="ubuntu-latest"
          else
          export runners="self-hosted"
          fi
          echo "runners=$runners" >> $GITHUB_OUTPUT
      - name: prod or not?
        id: environment
        run: | 
          if [[ $GITHUB_REF_NAME = "master" ]]
            then
              export environment=prod
          elif [[ $GITHUB_REF_NAME = "main" ]]
            then
              export environment=prod
          else
            export environment=dev
          fi
          echo "environment=$environment" >> $GITHUB_OUTPUT
      - name: GenerateTAG
        id: imagetag
        run: |
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ "$GITHUB_REF" = "refs/heads/master" ]; then
            echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-$GITHUB_SHA"
          fi
          echo "imagetag=$app:$tag" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT
      # - name: get envs 1Password
      #   uses: mcmarkj/1password-actions@v2.0.3

  use-variables:
    runs-on: ${{needs.setup_variables.outputs.output1}}
    needs: setup_variables
    steps:
      - name: test
        run: |
          echo ${{needs.setup_variables.outputs.output1}} ${{needs.setup_variables.outputs.output2}}  ${{needs.setup_variables.outputs.output3}}  
  # test:
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.token }}
  #   runs-on: ["self-hosted"]
  #   timeout-minutes: 15
  #   container: 
  #     image: composer
  #   steps:
  #     - name: pull code
  #       uses: actions/checkout@v3
  #     - name: run tests
  #       run: |
  #         composer install  --prefer-dist --ignore-platform-reqs --no-ansi --no-progress --no-interaction
  #     - name: phpcs
  #       run: |
  #         php ./vendor/bin/phpcs ./src/
  #     - name: phplint
  #       run: |
  #         find . -name '*.php' -not -path './vendor/*' -print0 | xargs -0 php -l
  #     - name: phpunit
  #       run: |
  #         php ./vendor/bin/phpunit


  # build:
  #   runs-on: ["self-hosted"]
  #   needs: test
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.token }}
  #   steps:
  #     - name: GenerateTAG
  #       id: generatetag
  #       run: |
  #         echo "GITHUB_REF - $GITHUB_REF"
  #         echo "GITHUB_SHA - $GITHUB_SHA"
  #         echo "GITHUB_REPOSITORY - $GITHUB_REPOSITORY"
  #         app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
  #         pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
  #         echo "app=$app" >> "$GITHUB_ENV"
  #         if [ "$GITHUB_REF" = "refs/heads/master" ]; then
  #           echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
  #           tag=production-"$GITHUB_SHA"
  #         else
  #           echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
  #           tag=pr-"$pull_number-$GITHUB_SHA"
  #         fi
  #         echo "fulltag=${{secrets.docker-reg}}/$app:$tag">>"$GITHUB_ENV"
  #     - name: Set up Docker Context for Buildx
  #       id: buildx-context
  #       run: |
  #         docker context create builders

  #     - name: Docker Setup Buildx
  #       uses: docker/setup-buildx-action@v2.0.0
  #       with:
  #         version: latest
  #         endpoint: builders
      
  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           ${{ secrets.docker-reg }}/${{ env.app }}
  #         tags: |
  #           type=schedule
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=raw,value=${{ env.tag }}
  #           type=ref,event=tag
  #           type=sha,enable=true,priority=100,prefix=,suffix=,format=long

  #     - name: Docker Login
  #       uses: docker/login-action@v2.0.0
  #       with:
  #         registry: ${{ secrets.docker-reg }}
  #         username: ${{ secrets.docker-login }}
  #         password: ${{ secrets.docker-pass }} 
  #         ecr: false

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3.1.1
  #       with:
  #         allow: network.host
  #         network: host
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
