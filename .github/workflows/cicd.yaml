---
on:
  workflow_call:
    inputs:
      language:
        required: false
        default: "all"
        type: string
      ComposerVersion:
        required: false
        default: "latest"
        type: string
      ComposerAdditionalArguments:
        required: false
        default: ""
        type: string
      ForceSelfHosted:
        required: false
        type: boolean
        default: false
      SkipTests:
        type: boolean
        required: false
        default: false
      PhpcsWorkdir:
        required: false
        type: string
        default: "./src/"
        description: "where is the code to be tested"
      SkipUnitTests:
        type: boolean
        required: false
      RunBehatTests:
        type: boolean
        required: false        
        default: false
      PhpVersion:
        required: false
        type: string
        default: "8.1"
        description: "php version to use, with minor version, no bugfix versions. default 8.1"
      PoChujMiBuildImage:
        required: false
        type: boolean
        default: true
        description: "enable 'Michal' mode for building image"
      UseMakeTargets:
        required: false
        type: string
        default: ""
        description: "If you are using makefile in project - specify targets here"
      PhpExtensions:
        type: string
        required: false
        default: "pdo_sqlite"
      SentryOrganisation:
        type: string
        required: false
        default: "loyalty-factory-aps"
        description: "Sentry Organisation"
      SentryProjectName:
        type: string
        required: false
        default: ""
        description: "Name of a Sentry Project to use"
      EnableSentryRelease: 
        type: boolean
        required: false
        default: false
        description: "enable/disable Sentry release"
      SentryUploadSourceMaps:
        type: boolean
        required: false
        default: false
        description: "If You want to upload sourcemaps to sentry"
      SentryTargetEnvironment:
        type: string
        required: false
        default: "production"
        description: "Target environment to build for Sentry"
      ApplicationLanguage:
        type: string
        required: false
        default: "php"
        description: "Language used in repository (default - php, possible options: nodejs)"
      UseManifest:
        type: boolean
        default: true
        required: false
        description: "wether the application uses Manifest or not"
      UseNPM:
        type: boolean
        default: false
        required: false
        description: "UseNPM enables/disables the access to NPM repository"
      NodeVersion:
        type: string
        required: false
        default: "15.12.0"
      DisableKarmaTests:
        type: boolean
        required: false
        default: false
      DisableJestTests:
        type: boolean
        required: false
        default: false
      EnablePsalm:
        type: boolean
        required: false
        default: false
      EnablePhpstan:
        type: boolean
        required: false
        default: false
      AdditionalJestParameters:
        type: string
        default: ""
        required: false

    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true
      numa-numa-token:
        required: true
      chartmuseum-url:
        required: true
      gh-ssh-key:
        required: true
      sentry-auth-token:
        required: false
      npmrc:
        required: false

  
  workflow_dispatch:
    

  
jobs:
  setup_variables:
    timeout-minutes: 5
    outputs:
      runners: ${{ steps.runners.outputs.runners }}
      environment: ${{ steps.environment.outputs.environment }}
      imagetag: ${{ steps.imagetag.outputs.imagetag }}
      app: ${{ steps.imagetag.outputs.app }}
      rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }}
      github-sha: ${{ steps.imagetag.outputs.github-sha }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      GH_TOKEN: ${{ secrets.numa-numa-token }}
      FORCE_PUSH: ${{ contains(github.event.head_commit.message, '/forcepush') }}
      DO_E2E_TESTS: ${{ contains(github.event.head_commit.message, '/e2e') }}
    steps:
      - name: pull code
        uses: actions/checkout@v3

      - name: forced selfhosted runners
        id: forced
        if: inputs.ForceSelfHosted
        run: echo "runners=self-hosted" >> $GITHUB_OUTPUT

      - name: how meny already paid minutes we have on github action runners?
        id: runners
        if: inputs.ForceSelfHosted == false
        run: | 
          minutes=`gh api -H "Accept: application/vnd.github+json" /orgs/easir/settings/billing/actions | jq ".total_minutes_used"`
          if (( $minutes < 2900 ))
          then 
          export runners="ubuntu-latest"
          else
          export runners="self-hosted"
          fi
          echo "runners=$runners" >> $GITHUB_OUTPUT
      # - name: variable runners output
      #   id: runners
      #   run: |
      #     # if [ "${{ steps.hosted.outputs.runners }}" == "${{ steps.forced.outputs.runners }}" ] then echo "runners=${{ steps.hosted.outputs.runners }}" >> $GITHUB_OUTPUT;
      #     if [ "${{ inputs.ForceSelfHosted }}" == "true" ] then echo "runners=${{ steps.forced.outputs.runners }}" >> $GITHUB_OUTPUT

      - name: prod or not?
        id: environment
        run: | 
          if [[ $GITHUB_REF_NAME = "master" ]]
            then
              export environment=prod
          elif [[ $GITHUB_REF_NAME = "main" ]]
            then
              export environment=prod
          else
            export environment=dev
          fi
          echo "environment=$environment" >> $GITHUB_OUTPUT

      - name: GenerateTAG
        id: imagetag
        run: |
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ ${{ steps.environment.outputs.environment }} = "prod" ]; then
            echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-$GITHUB_SHA"
          fi
          echo "imagetag=$tag" >> $GITHUB_OUTPUT
          echo "app=$app" >> $GITHUB_OUTPUT
          echo "github-sha=$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2.0.0
        with:
          files: "./manifest.yaml"

      - name: did manifest change?
        if: steps.check_files.outputs.files_exists == 'true'
        id: did-manifest-change
        uses: tj-actions/changed-files@v35.1.0
        with:
          files: |
            ./manifest.yaml

      - name: print all outputs
        run: |
          echo       "runners: ${{ steps.runners.outputs.runners }} \
          environment: ${{ steps.environment.outputs.environment }} \
          imagetag: ${{ steps.imagetag.outputs.imagetag }} \
          app: ${{ steps.imagetag.outputs.app }} \
          rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }} \
          github-sha: ${{ steps.imagetag.outputs.github-sha }}" >> $GITHUB_STEP_SUMMARY

  tests:
    if: ${{ inputs.SkipTests != true }}
    needs: setup_variables
    env: 
     GITHUB_TOKEN: ${{ secrets.numa-numa-token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 15
    steps:
      - name: pull code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive

      - uses: shivammathur/setup-php@2.24.0
        if: inputs.ApplicationLanguage == 'php'
        with:
          php-version: ${{inputs.PhpVersion}}
          extensions: ${{inputs.PhpExtensions}}
          coverage: pcov
          tools: behat, phpunit, composer, phpcs, php-cs-fixer, phpcbf, phpstan, psalm, phplint, 
        env:
          runner: ${{needs.setup_variables.outputs.runners}}

      - name: run Composer
        if: inputs.ApplicationLanguage == 'php'
        run: |
          composer install --prefer-dist --no-ansi --no-progress --no-interaction ${{ inputs.ComposerAdditionalArguments }}
      
      - name: make files
        shell: sh
        if: ${{ inputs.UseMakeTargets != '' }}
        run: |
          make ${{ inputs.UseMakeTargets }} -O -k

      - name: phpcs
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php'
        run: |
          composer exec -- phpcs ${{ inputs.PhpcsWorkdir }}

      - name: phplint
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php'
        run: |
          find . -name '*.php' -not -path './vendor/*' -print0 | xargs -0 php -l

      - name: phpunit
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true
        run: |
          composer exec -- phpunit
      
      - name: phpstan
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true && inputs.EnablePhpstan
        run: |
          composer exec -- phpstan analyse
      
      - name: psalm
        if: (success() || failure()) && inputs.ApplicationLanguage == 'php' && inputs.SkipUnitTests != true && inputs.EnablePsalm
        run: |
          composer exec -- psalm --long-progress

      - name: node
        if: inputs.ApplicationLanguage == 'nodejs'
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ inputs.NodeVersion }} 
          options: -v ${{ github.workspace }}:/work -e APPCONFIG_API=//api.domain" -e APPCONFIG_SOCKETAUTH="//api.domain/socket" -e APPCONFIG_UPLOAD="//api.domain" -e CONFIG_API_URL="http://api.domain" -e CONFIG_AUTH_URL="http://api.domain/token"
          run: |
            cd /work/
            rm -f .npmrc
            echo "${{secrets.npmrc}}" > .npmrc
            npm install
            npm run build

      - name: karma tests
        if: inputs.ApplicationLanguage == 'nodejs' && !inputs.DisableKarmaTests
        uses: addnab/docker-run-action@v3
        with:
          image: buildkite/puppeteer:latest
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/
            npm run test:karma --no-sandbox

      - name: jest tests
        if: inputs.ApplicationLanguage == 'nodejs' && !inputs.DisableJestTests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ inputs.NodeVersion }} 
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/
            npm run test:jest ${{ inputs.AdditionalJestParameters }}

      - name: jest jscs
        if: inputs.ApplicationLanguage == 'nodejs' && !inputs.DisableJestTests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ inputs.NodeVersion }}-alpine 
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/
            node_modules/.bin/jscs --config=.jscsrc src/app

      - name: eslint
        if: inputs.ApplicationLanguage == 'nodejs'
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ inputs.NodeVersion }}-alpine
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/
            npm run test:eslint


  behat:
    if: inputs.RunBehatTests
    needs: setup_variables
    env: 
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: run composer
        uses: addnab/docker-run-action@v3
        with:
          image: composer:${{inputs.ComposerVersion}}
          options: -v ${{ github.workspace }}:/app
          run: |
            ls -alr
            pwd
            composer install  --prefer-dist --no-ansi --no-progress --no-interaction ${{ inputs.ComposerAdditionalArguments }}

      - name: lets fire up the app
        env:
          SHELL_VERBOSITY: "-1"
        run: whoami && mkdir www && sudo php -d error_reporting="E_ALL & ~E_NOTICE & ~E_DEPRECATED" -S 0.0.0.0:8000 -t www public/index.php &           
       
      - name: and test it
        uses: php-actions/behat@v1
    
  manifest-generate:
    timeout-minutes: 5
    needs: setup_variables
    runs-on: ${{needs.setup_variables.outputs.runners}}
    if: needs.setup_variables.outputs.rebuildManifest == 'true'
    container: 
      image: docker-registry.easir.com/manifest:master-edc5d03a8b7a4530442e23d2bd87c0833b4bd0bd
      credentials:
          username: ${{secrets.docker-login}}
          password: ${{secrets.docker-pass}}
    steps:
      - name: pull code
        uses: actions/checkout@v3

      - name: generate manifest
        run: |
          manifest chart generate && helmpush chart "${{secrets.chartmuseum-url}}" --version "0.0.0-${{github.sha}}"

  # testofskip:
  #   needs: [ "setup_variables", "tests" ]
  #   runs-on: ${{needs.setup_variables.outputs.runners}}
  #   steps:
  #     - name: test
  #       if: |
  #         always() && 
  #         !contains(needs.*.result, 'failure') &&
  #         !contains(needs.*.result, 'canceled') &&
  #         inputs.PoChujMiBuildImage
  #       run: echo "dupa"

  build-image:
    timeout-minutes: 15
    needs: [ "setup_variables", "tests" ]
    if: |
      always() && 
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'canceled') &&
      inputs.PoChujMiBuildImage
    env: 
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    steps:    
      # - name: Import secrets for DEV
      #   if: ${{ steps.environment.outputs.environment }} = "dev"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-dev
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}

      # - name: Import secrets for Prod
      #   if: ${{ steps.environment.outputs.environment }} = "prod"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-prod
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}
      - name: pull code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.numa-numa-token }}
          submodules: recursive

      - name: authenticate to NPM
        if: inputs.UseNPM
        run: |
          rm -f .npmrc
          echo "${{secrets.npmrc}}" > .npmrc

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          version: v0.9.1
          endpoint: builders
          platforms: linux/arm64/v8,linux/amd64

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: |
            ${{ secrets.docker-reg }}/${{needs.setup_variables.outputs.app}}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=${{needs.setup_variables.outputs.imagetag}}

      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }} 
          ecr: false

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.3.0
        with:
          build-args: |
            IMAGE_VERSION=${{ needs.setup_variables.outputs.github-sha }}
            ENVIRONMENT=${{ needs.setup_variables.outputs.environment }}
            SENTRY_ORG=${{inputs.SentryOrganisation}}
            SENTRY_AUTH_TOKEN=${{secrets.sentry-auth-token}}
            SENTRY_PROJECT=${{inputs.SentryProjectName}}
          context: .
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.numa-numa-token }}
          github-token: ${{ secrets.numa-numa-token }}
    
      - name: summary
        run: |
          echo IMAGE_VERSION: ${{ needs.setup_variables.outputs.github-sha }} >> $GITHUB_STEP_SUMMARY
          echo "IMAGE TAGS : ${{ steps.meta.outputs.tags }} >> $GITHUB_STEP_SUMMARY"


