---
on:
  workflow_call:
    inputs:
      language:
        required: false
        default: "all"
        type: string
      ComposerVersion:
        required: false
        default: "latest"
        type: string
      ForceSelfHosted:
        required: false
        type: boolean
        default: false
      PhpcsWorkdir:
        required: false
        type: string
        default: "./src/"
      UnitTestsExecutable:
        required: false
        type: string
        default: "./vendor/bin/phpunit"



    secrets:
      token:
        required: true
      docker-reg:
        required: true
      docker-pass:
        required: true
      docker-login:
        required: true
      numa-numa-token:
        required: true
      chartmuseum-url:
        required: true
      gh-ssh-key:
        required: true
  workflow_dispatch:
    

  
jobs:
  setup_variables:
    timeout-minutes: 5
    outputs:
      runners: ${{ steps.runners.outputs.runners }}
      environment: ${{ steps.environment.outputs.environment }}
      imagetag: ${{ steps.imagetag.outputs.imagetag }}
      app: ${{ steps.imagetag.outputs.app }}
      rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.token }}
      GH_TOKEN: ${{ secrets.numa-numa-token }}
      FORCE_PUSH: ${{ contains(github.event.head_commit.message, '/forcepush') }}
      DO_E2E_TESTS: ${{ contains(github.event.head_commit.message, '/e2e') }}
    steps:
      - name: pull code
        uses: actions/checkout@v3

      - name: forced selfhosted runners
        if: inputs.ForceSelfHosted
        run: echo "runners=self-hosted" >> $GITHUB_OUTPUT

      - name: how meny already paid minutes we have on github action runners?
        id: runners
        if: inputs.ForceSelfHosted == false
        run: | 
          minutes=`gh api -H "Accept: application/vnd.github+json" /orgs/easir/settings/billing/actions | jq ".total_minutes_used"`
          if (( $minutes < 2500 ))
          then 
          export runners="ubuntu-latest"
          else
          export runners="self-hosted"
          fi
          echo "runners=$runners" >> $GITHUB_OUTPUT

      - name: prod or not?
        id: environment
        run: | 
          if [[ $GITHUB_REF_NAME = "master" ]]
            then
              export environment=prod
          elif [[ $GITHUB_REF_NAME = "main" ]]
            then
              export environment=prod
          else
            export environment=dev
          fi
          echo "environment=$environment" >> $GITHUB_OUTPUT

      - name: GenerateTAG
        id: imagetag
        run: |
          app=$(echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/")
          pull_number=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          echo "app=$app" >> "$GITHUB_ENV"
          if [ ${{ steps.environment.outputs.environment }} = "prod" ]; then
            echo "tag=production-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=production-"$GITHUB_SHA"
          else
            echo "tag=pr-$pull_number-$GITHUB_SHA" >> "$GITHUB_ENV"
            tag=pr-"$pull_number-$GITHUB_SHA"
          fi
          echo "imagetag=$tag" >> $GITHUB_OUTPUT
          echo "app=$app" >> $GITHUB_OUTPUT

      - name: did manifest change?
        id: did-manifest-change
        uses: tj-actions/changed-files@v35.1.0
        with:
          files: |
            ./manifest.yaml
      - name: print all outputs
        run: |
          echo       runners: ${{ steps.runners.outputs.runners }}       environment: ${{ steps.environment.outputs.environment }}      imagetag: ${{ steps.imagetag.outputs.imagetag }}      app: ${{ steps.imagetag.outputs.app }}      rebuildManifest: ${{ steps.did-manifest-change.outputs.any_changed }}
      
  tests:
    needs: setup_variables
    env: 
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    timeout-minutes: 15
    container: 
      image: composer:${{inputs.ComposerVersion}}
    steps:
      - name: pull code
        uses: actions/checkout@v3

      - name: run tests
        run: |
          mkdir ~/.ssh/
          echo '${{secrets.gh-ssh-key}}' > ~/.ssh/id_rsa
          composer install  --prefer-dist --ignore-platform-reqs --no-ansi --no-progress --no-interaction

      - name: phpcs
        run: |
          php ./vendor/bin/phpcs ${{ inputs.PhpcsWorkdir }}

      - name: phplint
        run: |
          find . -name '*.php' -not -path './vendor/*' -print0 | xargs -0 php -l
          
      - name: phpunit
        run: |
          php ${{ inputs.UnitTestsExecutable }}

  manifest-generate:
    timeout-minutes: 5
    needs: setup_variables
    runs-on: ${{needs.setup_variables.outputs.runners}}
    if: needs.setup_variables.outputs.rebuildManifest == true
    container: 
      image: docker-registry.easir.com/manifest:master-edc5d03a8b7a4530442e23d2bd87c0833b4bd0bd
      credentials:
          username: ${{secrets.docker-login}}
          password: ${{secrets.docker-pass}}
    steps:
      - name: pull code
        uses: actions/checkout@v3

      - name: generate manifest
        run: |
          manifest chart generate && helmpush chart "${{secrets.chartmuseum-url}}" --version "0.0.0-${{github.sha}}"

  build-image:
    timeout-minutes: 15
    needs: [ "setup_variables", "tests" ]
    env: 
      GITHUB_TOKEN: ${{ secrets.token }}
    runs-on: ${{needs.setup_variables.outputs.runners}}
    steps:    
      # - name: Import secrets for DEV
      #   if: ${{ steps.environment.outputs.environment }} = "dev"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-dev
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}

      # - name: Import secrets for Prod
      #   if: ${{ steps.environment.outputs.environment }} = "prod"
      #   uses: mcmarkj/1password-actions@v2
      #   id: screts-prod
      #   with:
      #     connect-server-url: ${{ secrets.TEST_OP_CONNECT_HOST }}
      #     connect-server-token: ${{ secrets.TEST_OP_CONNECT_TOKEN }}

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          version: latest
          endpoint: builders
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: |
            ${{ secrets.docker-reg }}/${{needs.setup_variables.outputs.app}}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=${{needs.setup_variables.outputs.imagetag}}

      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ secrets.docker-reg }}
          username: ${{ secrets.docker-login }}
          password: ${{ secrets.docker-pass }} 
          ecr: false

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.2.0
        with:
          allow: network.host
          network: host
          push: true
          tags: ${{ steps.meta.outputs.tags }}
